<?php
/**
 * BinanceOrderResponseDto
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * External Backend
 *
 * External API
 *
 * The version of the OpenAPI document: 1.15
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BinanceOrderResponseDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BinanceOrderResponseDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BinanceOrderResponseDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_id' => 'float',
        'client_order_id' => 'string',
        'symbol' => 'string',
        'side' => 'string',
        'type' => 'string',
        'status' => 'string',
        'executed_qty' => 'string',
        'orig_qty' => 'string',
        'cummulative_quote_qty' => 'string',
        'price' => 'string',
        'time_in_force' => 'string',
        'time' => 'float',
        'update_time' => 'float',
        'is_working' => 'bool',
        'order_list_id' => 'float',
        'working_type' => 'string',
        'price_protect' => 'bool',
        'orig_type' => 'string',
        'account_type' => 'string',
        'position_side' => 'string',
        'close_position' => 'bool',
        'activation_price' => 'string',
        'callback_rate' => 'string',
        'realized_profit' => 'string',
        'price_match' => 'string',
        'self_trade_prevention' => 'string',
        'good_till_date' => 'float',
        'fills' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_id' => null,
        'client_order_id' => null,
        'symbol' => null,
        'side' => null,
        'type' => null,
        'status' => null,
        'executed_qty' => null,
        'orig_qty' => null,
        'cummulative_quote_qty' => null,
        'price' => null,
        'time_in_force' => null,
        'time' => null,
        'update_time' => null,
        'is_working' => null,
        'order_list_id' => null,
        'working_type' => null,
        'price_protect' => null,
        'orig_type' => null,
        'account_type' => null,
        'position_side' => null,
        'close_position' => null,
        'activation_price' => null,
        'callback_rate' => null,
        'realized_profit' => null,
        'price_match' => null,
        'self_trade_prevention' => null,
        'good_till_date' => null,
        'fills' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order_id' => false,
        'client_order_id' => false,
        'symbol' => false,
        'side' => false,
        'type' => false,
        'status' => false,
        'executed_qty' => false,
        'orig_qty' => false,
        'cummulative_quote_qty' => false,
        'price' => false,
        'time_in_force' => false,
        'time' => false,
        'update_time' => false,
        'is_working' => false,
        'order_list_id' => false,
        'working_type' => false,
        'price_protect' => false,
        'orig_type' => false,
        'account_type' => false,
        'position_side' => false,
        'close_position' => false,
        'activation_price' => false,
        'callback_rate' => false,
        'realized_profit' => false,
        'price_match' => false,
        'self_trade_prevention' => false,
        'good_till_date' => false,
        'fills' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'orderId',
        'client_order_id' => 'clientOrderId',
        'symbol' => 'symbol',
        'side' => 'side',
        'type' => 'type',
        'status' => 'status',
        'executed_qty' => 'executedQty',
        'orig_qty' => 'origQty',
        'cummulative_quote_qty' => 'cummulativeQuoteQty',
        'price' => 'price',
        'time_in_force' => 'timeInForce',
        'time' => 'time',
        'update_time' => 'updateTime',
        'is_working' => 'isWorking',
        'order_list_id' => 'orderListId',
        'working_type' => 'workingType',
        'price_protect' => 'priceProtect',
        'orig_type' => 'origType',
        'account_type' => 'accountType',
        'position_side' => 'positionSide',
        'close_position' => 'closePosition',
        'activation_price' => 'activationPrice',
        'callback_rate' => 'callbackRate',
        'realized_profit' => 'realizedProfit',
        'price_match' => 'priceMatch',
        'self_trade_prevention' => 'selfTradePrevention',
        'good_till_date' => 'goodTillDate',
        'fills' => 'fills'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'client_order_id' => 'setClientOrderId',
        'symbol' => 'setSymbol',
        'side' => 'setSide',
        'type' => 'setType',
        'status' => 'setStatus',
        'executed_qty' => 'setExecutedQty',
        'orig_qty' => 'setOrigQty',
        'cummulative_quote_qty' => 'setCummulativeQuoteQty',
        'price' => 'setPrice',
        'time_in_force' => 'setTimeInForce',
        'time' => 'setTime',
        'update_time' => 'setUpdateTime',
        'is_working' => 'setIsWorking',
        'order_list_id' => 'setOrderListId',
        'working_type' => 'setWorkingType',
        'price_protect' => 'setPriceProtect',
        'orig_type' => 'setOrigType',
        'account_type' => 'setAccountType',
        'position_side' => 'setPositionSide',
        'close_position' => 'setClosePosition',
        'activation_price' => 'setActivationPrice',
        'callback_rate' => 'setCallbackRate',
        'realized_profit' => 'setRealizedProfit',
        'price_match' => 'setPriceMatch',
        'self_trade_prevention' => 'setSelfTradePrevention',
        'good_till_date' => 'setGoodTillDate',
        'fills' => 'setFills'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'client_order_id' => 'getClientOrderId',
        'symbol' => 'getSymbol',
        'side' => 'getSide',
        'type' => 'getType',
        'status' => 'getStatus',
        'executed_qty' => 'getExecutedQty',
        'orig_qty' => 'getOrigQty',
        'cummulative_quote_qty' => 'getCummulativeQuoteQty',
        'price' => 'getPrice',
        'time_in_force' => 'getTimeInForce',
        'time' => 'getTime',
        'update_time' => 'getUpdateTime',
        'is_working' => 'getIsWorking',
        'order_list_id' => 'getOrderListId',
        'working_type' => 'getWorkingType',
        'price_protect' => 'getPriceProtect',
        'orig_type' => 'getOrigType',
        'account_type' => 'getAccountType',
        'position_side' => 'getPositionSide',
        'close_position' => 'getClosePosition',
        'activation_price' => 'getActivationPrice',
        'callback_rate' => 'getCallbackRate',
        'realized_profit' => 'getRealizedProfit',
        'price_match' => 'getPriceMatch',
        'self_trade_prevention' => 'getSelfTradePrevention',
        'good_till_date' => 'getGoodTillDate',
        'fills' => 'getFills'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SIDE_BUY = 'BUY';
    public const SIDE_SELL = 'SELL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSideAllowableValues()
    {
        return [
            self::SIDE_BUY,
            self::SIDE_SELL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('client_order_id', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('side', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('executed_qty', $data ?? [], null);
        $this->setIfExists('orig_qty', $data ?? [], null);
        $this->setIfExists('cummulative_quote_qty', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('time_in_force', $data ?? [], null);
        $this->setIfExists('time', $data ?? [], null);
        $this->setIfExists('update_time', $data ?? [], null);
        $this->setIfExists('is_working', $data ?? [], null);
        $this->setIfExists('order_list_id', $data ?? [], null);
        $this->setIfExists('working_type', $data ?? [], null);
        $this->setIfExists('price_protect', $data ?? [], null);
        $this->setIfExists('orig_type', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('position_side', $data ?? [], null);
        $this->setIfExists('close_position', $data ?? [], null);
        $this->setIfExists('activation_price', $data ?? [], null);
        $this->setIfExists('callback_rate', $data ?? [], null);
        $this->setIfExists('realized_profit', $data ?? [], null);
        $this->setIfExists('price_match', $data ?? [], null);
        $this->setIfExists('self_trade_prevention', $data ?? [], null);
        $this->setIfExists('good_till_date', $data ?? [], null);
        $this->setIfExists('fills', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['client_order_id'] === null) {
            $invalidProperties[] = "'client_order_id' can't be null";
        }
        if ($this->container['symbol'] === null) {
            $invalidProperties[] = "'symbol' can't be null";
        }
        if ($this->container['side'] === null) {
            $invalidProperties[] = "'side' can't be null";
        }
        $allowedValues = $this->getSideAllowableValues();
        if (!is_null($this->container['side']) && !in_array($this->container['side'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'side', must be one of '%s'",
                $this->container['side'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['executed_qty'] === null) {
            $invalidProperties[] = "'executed_qty' can't be null";
        }
        if ($this->container['orig_qty'] === null) {
            $invalidProperties[] = "'orig_qty' can't be null";
        }
        if ($this->container['cummulative_quote_qty'] === null) {
            $invalidProperties[] = "'cummulative_quote_qty' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['time_in_force'] === null) {
            $invalidProperties[] = "'time_in_force' can't be null";
        }
        if ($this->container['time'] === null) {
            $invalidProperties[] = "'time' can't be null";
        }
        if ($this->container['update_time'] === null) {
            $invalidProperties[] = "'update_time' can't be null";
        }
        if ($this->container['is_working'] === null) {
            $invalidProperties[] = "'is_working' can't be null";
        }
        if ($this->container['order_list_id'] === null) {
            $invalidProperties[] = "'order_list_id' can't be null";
        }
        if ($this->container['working_type'] === null) {
            $invalidProperties[] = "'working_type' can't be null";
        }
        if ($this->container['price_protect'] === null) {
            $invalidProperties[] = "'price_protect' can't be null";
        }
        if ($this->container['orig_type'] === null) {
            $invalidProperties[] = "'orig_type' can't be null";
        }
        if ($this->container['account_type'] === null) {
            $invalidProperties[] = "'account_type' can't be null";
        }
        if ($this->container['position_side'] === null) {
            $invalidProperties[] = "'position_side' can't be null";
        }
        if ($this->container['close_position'] === null) {
            $invalidProperties[] = "'close_position' can't be null";
        }
        if ($this->container['activation_price'] === null) {
            $invalidProperties[] = "'activation_price' can't be null";
        }
        if ($this->container['callback_rate'] === null) {
            $invalidProperties[] = "'callback_rate' can't be null";
        }
        if ($this->container['realized_profit'] === null) {
            $invalidProperties[] = "'realized_profit' can't be null";
        }
        if ($this->container['price_match'] === null) {
            $invalidProperties[] = "'price_match' can't be null";
        }
        if ($this->container['self_trade_prevention'] === null) {
            $invalidProperties[] = "'self_trade_prevention' can't be null";
        }
        if ($this->container['good_till_date'] === null) {
            $invalidProperties[] = "'good_till_date' can't be null";
        }
        if ($this->container['fills'] === null) {
            $invalidProperties[] = "'fills' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return float
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param float $order_id Order ID from Binance
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets client_order_id
     *
     * @return string
     */
    public function getClientOrderId()
    {
        return $this->container['client_order_id'];
    }

    /**
     * Sets client_order_id
     *
     * @param string $client_order_id Client order ID
     *
     * @return self
     */
    public function setClientOrderId($client_order_id)
    {
        if (is_null($client_order_id)) {
            throw new \InvalidArgumentException('non-nullable client_order_id cannot be null');
        }
        $this->container['client_order_id'] = $client_order_id;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol Trading pair symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets side
     *
     * @return string
     */
    public function getSide()
    {
        return $this->container['side'];
    }

    /**
     * Sets side
     *
     * @param string $side Order side
     *
     * @return self
     */
    public function setSide($side)
    {
        if (is_null($side)) {
            throw new \InvalidArgumentException('non-nullable side cannot be null');
        }
        $allowedValues = $this->getSideAllowableValues();
        if (!in_array($side, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'side', must be one of '%s'",
                    $side,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['side'] = $side;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Order type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Order status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets executed_qty
     *
     * @return string
     */
    public function getExecutedQty()
    {
        return $this->container['executed_qty'];
    }

    /**
     * Sets executed_qty
     *
     * @param string $executed_qty Executed quantity
     *
     * @return self
     */
    public function setExecutedQty($executed_qty)
    {
        if (is_null($executed_qty)) {
            throw new \InvalidArgumentException('non-nullable executed_qty cannot be null');
        }
        $this->container['executed_qty'] = $executed_qty;

        return $this;
    }

    /**
     * Gets orig_qty
     *
     * @return string
     */
    public function getOrigQty()
    {
        return $this->container['orig_qty'];
    }

    /**
     * Sets orig_qty
     *
     * @param string $orig_qty Original quantity
     *
     * @return self
     */
    public function setOrigQty($orig_qty)
    {
        if (is_null($orig_qty)) {
            throw new \InvalidArgumentException('non-nullable orig_qty cannot be null');
        }
        $this->container['orig_qty'] = $orig_qty;

        return $this;
    }

    /**
     * Gets cummulative_quote_qty
     *
     * @return string
     */
    public function getCummulativeQuoteQty()
    {
        return $this->container['cummulative_quote_qty'];
    }

    /**
     * Sets cummulative_quote_qty
     *
     * @param string $cummulative_quote_qty Cumulative quote quantity
     *
     * @return self
     */
    public function setCummulativeQuoteQty($cummulative_quote_qty)
    {
        if (is_null($cummulative_quote_qty)) {
            throw new \InvalidArgumentException('non-nullable cummulative_quote_qty cannot be null');
        }
        $this->container['cummulative_quote_qty'] = $cummulative_quote_qty;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price Order price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets time_in_force
     *
     * @return string
     */
    public function getTimeInForce()
    {
        return $this->container['time_in_force'];
    }

    /**
     * Sets time_in_force
     *
     * @param string $time_in_force Time in force
     *
     * @return self
     */
    public function setTimeInForce($time_in_force)
    {
        if (is_null($time_in_force)) {
            throw new \InvalidArgumentException('non-nullable time_in_force cannot be null');
        }
        $this->container['time_in_force'] = $time_in_force;

        return $this;
    }

    /**
     * Gets time
     *
     * @return float
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param float $time Order creation time
     *
     * @return self
     */
    public function setTime($time)
    {
        if (is_null($time)) {
            throw new \InvalidArgumentException('non-nullable time cannot be null');
        }
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return float
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param float $update_time Order update time
     *
     * @return self
     */
    public function setUpdateTime($update_time)
    {
        if (is_null($update_time)) {
            throw new \InvalidArgumentException('non-nullable update_time cannot be null');
        }
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets is_working
     *
     * @return bool
     */
    public function getIsWorking()
    {
        return $this->container['is_working'];
    }

    /**
     * Sets is_working
     *
     * @param bool $is_working Whether order is working
     *
     * @return self
     */
    public function setIsWorking($is_working)
    {
        if (is_null($is_working)) {
            throw new \InvalidArgumentException('non-nullable is_working cannot be null');
        }
        $this->container['is_working'] = $is_working;

        return $this;
    }

    /**
     * Gets order_list_id
     *
     * @return float
     */
    public function getOrderListId()
    {
        return $this->container['order_list_id'];
    }

    /**
     * Sets order_list_id
     *
     * @param float $order_list_id Order list ID
     *
     * @return self
     */
    public function setOrderListId($order_list_id)
    {
        if (is_null($order_list_id)) {
            throw new \InvalidArgumentException('non-nullable order_list_id cannot be null');
        }
        $this->container['order_list_id'] = $order_list_id;

        return $this;
    }

    /**
     * Gets working_type
     *
     * @return string
     */
    public function getWorkingType()
    {
        return $this->container['working_type'];
    }

    /**
     * Sets working_type
     *
     * @param string $working_type Working type
     *
     * @return self
     */
    public function setWorkingType($working_type)
    {
        if (is_null($working_type)) {
            throw new \InvalidArgumentException('non-nullable working_type cannot be null');
        }
        $this->container['working_type'] = $working_type;

        return $this;
    }

    /**
     * Gets price_protect
     *
     * @return bool
     */
    public function getPriceProtect()
    {
        return $this->container['price_protect'];
    }

    /**
     * Sets price_protect
     *
     * @param bool $price_protect Price protection
     *
     * @return self
     */
    public function setPriceProtect($price_protect)
    {
        if (is_null($price_protect)) {
            throw new \InvalidArgumentException('non-nullable price_protect cannot be null');
        }
        $this->container['price_protect'] = $price_protect;

        return $this;
    }

    /**
     * Gets orig_type
     *
     * @return string
     */
    public function getOrigType()
    {
        return $this->container['orig_type'];
    }

    /**
     * Sets orig_type
     *
     * @param string $orig_type Original order type
     *
     * @return self
     */
    public function setOrigType($orig_type)
    {
        if (is_null($orig_type)) {
            throw new \InvalidArgumentException('non-nullable orig_type cannot be null');
        }
        $this->container['orig_type'] = $orig_type;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string $account_type Account type
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets position_side
     *
     * @return string
     */
    public function getPositionSide()
    {
        return $this->container['position_side'];
    }

    /**
     * Sets position_side
     *
     * @param string $position_side Position side
     *
     * @return self
     */
    public function setPositionSide($position_side)
    {
        if (is_null($position_side)) {
            throw new \InvalidArgumentException('non-nullable position_side cannot be null');
        }
        $this->container['position_side'] = $position_side;

        return $this;
    }

    /**
     * Gets close_position
     *
     * @return bool
     */
    public function getClosePosition()
    {
        return $this->container['close_position'];
    }

    /**
     * Sets close_position
     *
     * @param bool $close_position Close position flag
     *
     * @return self
     */
    public function setClosePosition($close_position)
    {
        if (is_null($close_position)) {
            throw new \InvalidArgumentException('non-nullable close_position cannot be null');
        }
        $this->container['close_position'] = $close_position;

        return $this;
    }

    /**
     * Gets activation_price
     *
     * @return string
     */
    public function getActivationPrice()
    {
        return $this->container['activation_price'];
    }

    /**
     * Sets activation_price
     *
     * @param string $activation_price Activation price
     *
     * @return self
     */
    public function setActivationPrice($activation_price)
    {
        if (is_null($activation_price)) {
            throw new \InvalidArgumentException('non-nullable activation_price cannot be null');
        }
        $this->container['activation_price'] = $activation_price;

        return $this;
    }

    /**
     * Gets callback_rate
     *
     * @return string
     */
    public function getCallbackRate()
    {
        return $this->container['callback_rate'];
    }

    /**
     * Sets callback_rate
     *
     * @param string $callback_rate Callback rate
     *
     * @return self
     */
    public function setCallbackRate($callback_rate)
    {
        if (is_null($callback_rate)) {
            throw new \InvalidArgumentException('non-nullable callback_rate cannot be null');
        }
        $this->container['callback_rate'] = $callback_rate;

        return $this;
    }

    /**
     * Gets realized_profit
     *
     * @return string
     */
    public function getRealizedProfit()
    {
        return $this->container['realized_profit'];
    }

    /**
     * Sets realized_profit
     *
     * @param string $realized_profit Realized profit
     *
     * @return self
     */
    public function setRealizedProfit($realized_profit)
    {
        if (is_null($realized_profit)) {
            throw new \InvalidArgumentException('non-nullable realized_profit cannot be null');
        }
        $this->container['realized_profit'] = $realized_profit;

        return $this;
    }

    /**
     * Gets price_match
     *
     * @return string
     */
    public function getPriceMatch()
    {
        return $this->container['price_match'];
    }

    /**
     * Sets price_match
     *
     * @param string $price_match Price match
     *
     * @return self
     */
    public function setPriceMatch($price_match)
    {
        if (is_null($price_match)) {
            throw new \InvalidArgumentException('non-nullable price_match cannot be null');
        }
        $this->container['price_match'] = $price_match;

        return $this;
    }

    /**
     * Gets self_trade_prevention
     *
     * @return string
     */
    public function getSelfTradePrevention()
    {
        return $this->container['self_trade_prevention'];
    }

    /**
     * Sets self_trade_prevention
     *
     * @param string $self_trade_prevention Self trade prevention
     *
     * @return self
     */
    public function setSelfTradePrevention($self_trade_prevention)
    {
        if (is_null($self_trade_prevention)) {
            throw new \InvalidArgumentException('non-nullable self_trade_prevention cannot be null');
        }
        $this->container['self_trade_prevention'] = $self_trade_prevention;

        return $this;
    }

    /**
     * Gets good_till_date
     *
     * @return float
     */
    public function getGoodTillDate()
    {
        return $this->container['good_till_date'];
    }

    /**
     * Sets good_till_date
     *
     * @param float $good_till_date Good till date
     *
     * @return self
     */
    public function setGoodTillDate($good_till_date)
    {
        if (is_null($good_till_date)) {
            throw new \InvalidArgumentException('non-nullable good_till_date cannot be null');
        }
        $this->container['good_till_date'] = $good_till_date;

        return $this;
    }

    /**
     * Gets fills
     *
     * @return string[]
     */
    public function getFills()
    {
        return $this->container['fills'];
    }

    /**
     * Sets fills
     *
     * @param string[] $fills Order fills
     *
     * @return self
     */
    public function setFills($fills)
    {
        if (is_null($fills)) {
            throw new \InvalidArgumentException('non-nullable fills cannot be null');
        }
        $this->container['fills'] = $fills;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


