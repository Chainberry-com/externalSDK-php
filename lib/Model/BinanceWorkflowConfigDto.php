<?php
/**
 * BinanceWorkflowConfigDto
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * External Backend
 *
 * External API
 *
 * The version of the OpenAPI document: 1.15
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BinanceWorkflowConfigDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BinanceWorkflowConfigDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BinanceWorkflowConfigDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'deposit_asset' => 'string',
        'quote_order_qty' => 'string',
        'exact_quantity' => 'string',
        'timeout_seconds' => 'float',
        'vault_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'deposit_asset' => null,
        'quote_order_qty' => null,
        'exact_quantity' => null,
        'timeout_seconds' => null,
        'vault_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'deposit_asset' => false,
        'quote_order_qty' => false,
        'exact_quantity' => false,
        'timeout_seconds' => false,
        'vault_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deposit_asset' => 'depositAsset',
        'quote_order_qty' => 'quoteOrderQty',
        'exact_quantity' => 'exactQuantity',
        'timeout_seconds' => 'timeoutSeconds',
        'vault_id' => 'vaultId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deposit_asset' => 'setDepositAsset',
        'quote_order_qty' => 'setQuoteOrderQty',
        'exact_quantity' => 'setExactQuantity',
        'timeout_seconds' => 'setTimeoutSeconds',
        'vault_id' => 'setVaultId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deposit_asset' => 'getDepositAsset',
        'quote_order_qty' => 'getQuoteOrderQty',
        'exact_quantity' => 'getExactQuantity',
        'timeout_seconds' => 'getTimeoutSeconds',
        'vault_id' => 'getVaultId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('deposit_asset', $data ?? [], null);
        $this->setIfExists('quote_order_qty', $data ?? [], null);
        $this->setIfExists('exact_quantity', $data ?? [], null);
        $this->setIfExists('timeout_seconds', $data ?? [], null);
        $this->setIfExists('vault_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['deposit_asset'] === null) {
            $invalidProperties[] = "'deposit_asset' can't be null";
        }
        if ($this->container['vault_id'] === null) {
            $invalidProperties[] = "'vault_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deposit_asset
     *
     * @return string
     */
    public function getDepositAsset()
    {
        return $this->container['deposit_asset'];
    }

    /**
     * Sets deposit_asset
     *
     * @param string $deposit_asset Asset to deposit. Supported assets: BTC, LTC, USDC, ETH, BNB, TRX, TON
     *
     * @return self
     */
    public function setDepositAsset($deposit_asset)
    {
        if (is_null($deposit_asset)) {
            throw new \InvalidArgumentException('non-nullable deposit_asset cannot be null');
        }
        $this->container['deposit_asset'] = $deposit_asset;

        return $this;
    }

    /**
     * Gets quote_order_qty
     *
     * @return string|null
     */
    public function getQuoteOrderQty()
    {
        return $this->container['quote_order_qty'];
    }

    /**
     * Sets quote_order_qty
     *
     * @param string|null $quote_order_qty Quote order quantity (amount to spend)
     *
     * @return self
     */
    public function setQuoteOrderQty($quote_order_qty)
    {
        if (is_null($quote_order_qty)) {
            throw new \InvalidArgumentException('non-nullable quote_order_qty cannot be null');
        }
        $this->container['quote_order_qty'] = $quote_order_qty;

        return $this;
    }

    /**
     * Gets exact_quantity
     *
     * @return string|null
     */
    public function getExactQuantity()
    {
        return $this->container['exact_quantity'];
    }

    /**
     * Sets exact_quantity
     *
     * @param string|null $exact_quantity Exact quantity to receive (optional)
     *
     * @return self
     */
    public function setExactQuantity($exact_quantity)
    {
        if (is_null($exact_quantity)) {
            throw new \InvalidArgumentException('non-nullable exact_quantity cannot be null');
        }
        $this->container['exact_quantity'] = $exact_quantity;

        return $this;
    }

    /**
     * Gets timeout_seconds
     *
     * @return float|null
     */
    public function getTimeoutSeconds()
    {
        return $this->container['timeout_seconds'];
    }

    /**
     * Sets timeout_seconds
     *
     * @param float|null $timeout_seconds Timeout for Fireblocks transactions in seconds
     *
     * @return self
     */
    public function setTimeoutSeconds($timeout_seconds)
    {
        if (is_null($timeout_seconds)) {
            throw new \InvalidArgumentException('non-nullable timeout_seconds cannot be null');
        }
        $this->container['timeout_seconds'] = $timeout_seconds;

        return $this;
    }

    /**
     * Gets vault_id
     *
     * @return string
     */
    public function getVaultId()
    {
        return $this->container['vault_id'];
    }

    /**
     * Sets vault_id
     *
     * @param string $vault_id Fireblocks vault ID
     *
     * @return self
     */
    public function setVaultId($vault_id)
    {
        if (is_null($vault_id)) {
            throw new \InvalidArgumentException('non-nullable vault_id cannot be null');
        }
        $this->container['vault_id'] = $vault_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


