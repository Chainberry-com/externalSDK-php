<?php
/**
 * GetDepositPaymentDtoCryptoTransactionInfoInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * External Backend
 *
 * External API
 *
 * The version of the OpenAPI document: 1.24
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetDepositPaymentDtoCryptoTransactionInfoInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetDepositPaymentDtoCryptoTransactionInfoInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetDepositPaymentDto_cryptoTransactionInfo_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'txid' => 'string',
        'tx_hash' => 'string',
        'explorer_link' => 'string',
        'amount' => 'float',
        'to' => 'string',
        'to_link' => 'string',
        'from' => 'string',
        'from_link' => 'string',
        'processing_fee' => 'float',
        'processing_fee_usd' => 'float',
        'conversion_rate' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'txid' => null,
        'tx_hash' => null,
        'explorer_link' => null,
        'amount' => null,
        'to' => null,
        'to_link' => null,
        'from' => null,
        'from_link' => null,
        'processing_fee' => null,
        'processing_fee_usd' => null,
        'conversion_rate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'txid' => false,
        'tx_hash' => false,
        'explorer_link' => false,
        'amount' => false,
        'to' => false,
        'to_link' => false,
        'from' => false,
        'from_link' => false,
        'processing_fee' => false,
        'processing_fee_usd' => false,
        'conversion_rate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'txid' => 'txid',
        'tx_hash' => 'txHash',
        'explorer_link' => 'explorerLink',
        'amount' => 'amount',
        'to' => 'to',
        'to_link' => 'toLink',
        'from' => 'from',
        'from_link' => 'fromLink',
        'processing_fee' => 'processingFee',
        'processing_fee_usd' => 'processingFeeUsd',
        'conversion_rate' => 'conversionRate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'txid' => 'setTxid',
        'tx_hash' => 'setTxHash',
        'explorer_link' => 'setExplorerLink',
        'amount' => 'setAmount',
        'to' => 'setTo',
        'to_link' => 'setToLink',
        'from' => 'setFrom',
        'from_link' => 'setFromLink',
        'processing_fee' => 'setProcessingFee',
        'processing_fee_usd' => 'setProcessingFeeUsd',
        'conversion_rate' => 'setConversionRate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'txid' => 'getTxid',
        'tx_hash' => 'getTxHash',
        'explorer_link' => 'getExplorerLink',
        'amount' => 'getAmount',
        'to' => 'getTo',
        'to_link' => 'getToLink',
        'from' => 'getFrom',
        'from_link' => 'getFromLink',
        'processing_fee' => 'getProcessingFee',
        'processing_fee_usd' => 'getProcessingFeeUsd',
        'conversion_rate' => 'getConversionRate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('txid', $data ?? [], null);
        $this->setIfExists('tx_hash', $data ?? [], null);
        $this->setIfExists('explorer_link', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('to_link', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('from_link', $data ?? [], null);
        $this->setIfExists('processing_fee', $data ?? [], null);
        $this->setIfExists('processing_fee_usd', $data ?? [], null);
        $this->setIfExists('conversion_rate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets txid
     *
     * @return string|null
     */
    public function getTxid()
    {
        return $this->container['txid'];
    }

    /**
     * Sets txid
     *
     * @param string|null $txid txid
     *
     * @return self
     */
    public function setTxid($txid)
    {
        if (is_null($txid)) {
            throw new \InvalidArgumentException('non-nullable txid cannot be null');
        }
        $this->container['txid'] = $txid;

        return $this;
    }

    /**
     * Gets tx_hash
     *
     * @return string|null
     */
    public function getTxHash()
    {
        return $this->container['tx_hash'];
    }

    /**
     * Sets tx_hash
     *
     * @param string|null $tx_hash tx_hash
     *
     * @return self
     */
    public function setTxHash($tx_hash)
    {
        if (is_null($tx_hash)) {
            throw new \InvalidArgumentException('non-nullable tx_hash cannot be null');
        }
        $this->container['tx_hash'] = $tx_hash;

        return $this;
    }

    /**
     * Gets explorer_link
     *
     * @return string|null
     */
    public function getExplorerLink()
    {
        return $this->container['explorer_link'];
    }

    /**
     * Sets explorer_link
     *
     * @param string|null $explorer_link explorer_link
     *
     * @return self
     */
    public function setExplorerLink($explorer_link)
    {
        if (is_null($explorer_link)) {
            throw new \InvalidArgumentException('non-nullable explorer_link cannot be null');
        }
        $this->container['explorer_link'] = $explorer_link;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string|null $to to
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets to_link
     *
     * @return string|null
     */
    public function getToLink()
    {
        return $this->container['to_link'];
    }

    /**
     * Sets to_link
     *
     * @param string|null $to_link to_link
     *
     * @return self
     */
    public function setToLink($to_link)
    {
        if (is_null($to_link)) {
            throw new \InvalidArgumentException('non-nullable to_link cannot be null');
        }
        $this->container['to_link'] = $to_link;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from from
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets from_link
     *
     * @return string|null
     */
    public function getFromLink()
    {
        return $this->container['from_link'];
    }

    /**
     * Sets from_link
     *
     * @param string|null $from_link from_link
     *
     * @return self
     */
    public function setFromLink($from_link)
    {
        if (is_null($from_link)) {
            throw new \InvalidArgumentException('non-nullable from_link cannot be null');
        }
        $this->container['from_link'] = $from_link;

        return $this;
    }

    /**
     * Gets processing_fee
     *
     * @return float|null
     */
    public function getProcessingFee()
    {
        return $this->container['processing_fee'];
    }

    /**
     * Sets processing_fee
     *
     * @param float|null $processing_fee processing_fee
     *
     * @return self
     */
    public function setProcessingFee($processing_fee)
    {
        if (is_null($processing_fee)) {
            throw new \InvalidArgumentException('non-nullable processing_fee cannot be null');
        }
        $this->container['processing_fee'] = $processing_fee;

        return $this;
    }

    /**
     * Gets processing_fee_usd
     *
     * @return float|null
     */
    public function getProcessingFeeUsd()
    {
        return $this->container['processing_fee_usd'];
    }

    /**
     * Sets processing_fee_usd
     *
     * @param float|null $processing_fee_usd processing_fee_usd
     *
     * @return self
     */
    public function setProcessingFeeUsd($processing_fee_usd)
    {
        if (is_null($processing_fee_usd)) {
            throw new \InvalidArgumentException('non-nullable processing_fee_usd cannot be null');
        }
        $this->container['processing_fee_usd'] = $processing_fee_usd;

        return $this;
    }

    /**
     * Gets conversion_rate
     *
     * @return float|null
     */
    public function getConversionRate()
    {
        return $this->container['conversion_rate'];
    }

    /**
     * Sets conversion_rate
     *
     * @param float|null $conversion_rate conversion_rate
     *
     * @return self
     */
    public function setConversionRate($conversion_rate)
    {
        if (is_null($conversion_rate)) {
            throw new \InvalidArgumentException('non-nullable conversion_rate cannot be null');
        }
        $this->container['conversion_rate'] = $conversion_rate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


