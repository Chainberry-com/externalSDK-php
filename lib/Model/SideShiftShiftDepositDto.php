<?php
/**
 * SideShiftShiftDepositDto
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * External Backend
 *
 * External API
 *
 * The version of the OpenAPI document: 1.24
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SideShiftShiftDepositDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SideShiftShiftDepositDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SideShiftShiftDepositDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'updated_at' => 'string',
        'deposit_hash' => 'string',
        'settle_hash' => 'string',
        'deposit_received_at' => 'string',
        'deposit_amount' => 'string',
        'settle_amount' => 'string',
        'rate' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'updated_at' => null,
        'deposit_hash' => null,
        'settle_hash' => null,
        'deposit_received_at' => null,
        'deposit_amount' => null,
        'settle_amount' => null,
        'rate' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'updated_at' => false,
        'deposit_hash' => false,
        'settle_hash' => false,
        'deposit_received_at' => false,
        'deposit_amount' => false,
        'settle_amount' => false,
        'rate' => false,
        'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'updated_at' => 'updatedAt',
        'deposit_hash' => 'depositHash',
        'settle_hash' => 'settleHash',
        'deposit_received_at' => 'depositReceivedAt',
        'deposit_amount' => 'depositAmount',
        'settle_amount' => 'settleAmount',
        'rate' => 'rate',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'updated_at' => 'setUpdatedAt',
        'deposit_hash' => 'setDepositHash',
        'settle_hash' => 'setSettleHash',
        'deposit_received_at' => 'setDepositReceivedAt',
        'deposit_amount' => 'setDepositAmount',
        'settle_amount' => 'setSettleAmount',
        'rate' => 'setRate',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'updated_at' => 'getUpdatedAt',
        'deposit_hash' => 'getDepositHash',
        'settle_hash' => 'getSettleHash',
        'deposit_received_at' => 'getDepositReceivedAt',
        'deposit_amount' => 'getDepositAmount',
        'settle_amount' => 'getSettleAmount',
        'rate' => 'getRate',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('deposit_hash', $data ?? [], null);
        $this->setIfExists('settle_hash', $data ?? [], null);
        $this->setIfExists('deposit_received_at', $data ?? [], null);
        $this->setIfExists('deposit_amount', $data ?? [], null);
        $this->setIfExists('settle_amount', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at Updated timestamp
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets deposit_hash
     *
     * @return string|null
     */
    public function getDepositHash()
    {
        return $this->container['deposit_hash'];
    }

    /**
     * Sets deposit_hash
     *
     * @param string|null $deposit_hash Deposit hash
     *
     * @return self
     */
    public function setDepositHash($deposit_hash)
    {
        if (is_null($deposit_hash)) {
            throw new \InvalidArgumentException('non-nullable deposit_hash cannot be null');
        }
        $this->container['deposit_hash'] = $deposit_hash;

        return $this;
    }

    /**
     * Gets settle_hash
     *
     * @return string|null
     */
    public function getSettleHash()
    {
        return $this->container['settle_hash'];
    }

    /**
     * Sets settle_hash
     *
     * @param string|null $settle_hash Settlement hash
     *
     * @return self
     */
    public function setSettleHash($settle_hash)
    {
        if (is_null($settle_hash)) {
            throw new \InvalidArgumentException('non-nullable settle_hash cannot be null');
        }
        $this->container['settle_hash'] = $settle_hash;

        return $this;
    }

    /**
     * Gets deposit_received_at
     *
     * @return string|null
     */
    public function getDepositReceivedAt()
    {
        return $this->container['deposit_received_at'];
    }

    /**
     * Sets deposit_received_at
     *
     * @param string|null $deposit_received_at Deposit received timestamp
     *
     * @return self
     */
    public function setDepositReceivedAt($deposit_received_at)
    {
        if (is_null($deposit_received_at)) {
            throw new \InvalidArgumentException('non-nullable deposit_received_at cannot be null');
        }
        $this->container['deposit_received_at'] = $deposit_received_at;

        return $this;
    }

    /**
     * Gets deposit_amount
     *
     * @return string|null
     */
    public function getDepositAmount()
    {
        return $this->container['deposit_amount'];
    }

    /**
     * Sets deposit_amount
     *
     * @param string|null $deposit_amount Deposit amount
     *
     * @return self
     */
    public function setDepositAmount($deposit_amount)
    {
        if (is_null($deposit_amount)) {
            throw new \InvalidArgumentException('non-nullable deposit_amount cannot be null');
        }
        $this->container['deposit_amount'] = $deposit_amount;

        return $this;
    }

    /**
     * Gets settle_amount
     *
     * @return string|null
     */
    public function getSettleAmount()
    {
        return $this->container['settle_amount'];
    }

    /**
     * Sets settle_amount
     *
     * @param string|null $settle_amount Settlement amount
     *
     * @return self
     */
    public function setSettleAmount($settle_amount)
    {
        if (is_null($settle_amount)) {
            throw new \InvalidArgumentException('non-nullable settle_amount cannot be null');
        }
        $this->container['settle_amount'] = $settle_amount;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return string|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param string|null $rate Rate
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Shift status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


