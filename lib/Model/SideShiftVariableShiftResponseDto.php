<?php
/**
 * SideShiftVariableShiftResponseDto
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * External Backend
 *
 * External API
 *
 * The version of the OpenAPI document: 1.24
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SideShiftVariableShiftResponseDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SideShiftVariableShiftResponseDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SideShiftVariableShiftResponseDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_at' => 'string',
        'deposit_coin' => 'string',
        'settle_coin' => 'string',
        'deposit_network' => 'string',
        'settle_network' => 'string',
        'deposit_address' => 'string',
        'deposit_memo' => 'string',
        'settle_address' => 'string',
        'settle_memo' => 'string',
        'deposit_min' => 'string',
        'deposit_max' => 'string',
        'refund_address' => 'string',
        'refund_memo' => 'string',
        'type' => 'string',
        'expires_at' => 'string',
        'status' => 'string',
        'average_shift_seconds' => 'string',
        'external_id' => 'string',
        'settle_coin_network_fee' => 'string',
        'network_fee_usd' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_at' => null,
        'deposit_coin' => null,
        'settle_coin' => null,
        'deposit_network' => null,
        'settle_network' => null,
        'deposit_address' => null,
        'deposit_memo' => null,
        'settle_address' => null,
        'settle_memo' => null,
        'deposit_min' => null,
        'deposit_max' => null,
        'refund_address' => null,
        'refund_memo' => null,
        'type' => null,
        'expires_at' => null,
        'status' => null,
        'average_shift_seconds' => null,
        'external_id' => null,
        'settle_coin_network_fee' => null,
        'network_fee_usd' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_at' => false,
        'deposit_coin' => false,
        'settle_coin' => false,
        'deposit_network' => false,
        'settle_network' => false,
        'deposit_address' => false,
        'deposit_memo' => false,
        'settle_address' => false,
        'settle_memo' => false,
        'deposit_min' => false,
        'deposit_max' => false,
        'refund_address' => false,
        'refund_memo' => false,
        'type' => false,
        'expires_at' => false,
        'status' => false,
        'average_shift_seconds' => false,
        'external_id' => false,
        'settle_coin_network_fee' => false,
        'network_fee_usd' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'createdAt',
        'deposit_coin' => 'depositCoin',
        'settle_coin' => 'settleCoin',
        'deposit_network' => 'depositNetwork',
        'settle_network' => 'settleNetwork',
        'deposit_address' => 'depositAddress',
        'deposit_memo' => 'depositMemo',
        'settle_address' => 'settleAddress',
        'settle_memo' => 'settleMemo',
        'deposit_min' => 'depositMin',
        'deposit_max' => 'depositMax',
        'refund_address' => 'refundAddress',
        'refund_memo' => 'refundMemo',
        'type' => 'type',
        'expires_at' => 'expiresAt',
        'status' => 'status',
        'average_shift_seconds' => 'averageShiftSeconds',
        'external_id' => 'externalId',
        'settle_coin_network_fee' => 'settleCoinNetworkFee',
        'network_fee_usd' => 'networkFeeUsd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'deposit_coin' => 'setDepositCoin',
        'settle_coin' => 'setSettleCoin',
        'deposit_network' => 'setDepositNetwork',
        'settle_network' => 'setSettleNetwork',
        'deposit_address' => 'setDepositAddress',
        'deposit_memo' => 'setDepositMemo',
        'settle_address' => 'setSettleAddress',
        'settle_memo' => 'setSettleMemo',
        'deposit_min' => 'setDepositMin',
        'deposit_max' => 'setDepositMax',
        'refund_address' => 'setRefundAddress',
        'refund_memo' => 'setRefundMemo',
        'type' => 'setType',
        'expires_at' => 'setExpiresAt',
        'status' => 'setStatus',
        'average_shift_seconds' => 'setAverageShiftSeconds',
        'external_id' => 'setExternalId',
        'settle_coin_network_fee' => 'setSettleCoinNetworkFee',
        'network_fee_usd' => 'setNetworkFeeUsd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'deposit_coin' => 'getDepositCoin',
        'settle_coin' => 'getSettleCoin',
        'deposit_network' => 'getDepositNetwork',
        'settle_network' => 'getSettleNetwork',
        'deposit_address' => 'getDepositAddress',
        'deposit_memo' => 'getDepositMemo',
        'settle_address' => 'getSettleAddress',
        'settle_memo' => 'getSettleMemo',
        'deposit_min' => 'getDepositMin',
        'deposit_max' => 'getDepositMax',
        'refund_address' => 'getRefundAddress',
        'refund_memo' => 'getRefundMemo',
        'type' => 'getType',
        'expires_at' => 'getExpiresAt',
        'status' => 'getStatus',
        'average_shift_seconds' => 'getAverageShiftSeconds',
        'external_id' => 'getExternalId',
        'settle_coin_network_fee' => 'getSettleCoinNetworkFee',
        'network_fee_usd' => 'getNetworkFeeUsd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('deposit_coin', $data ?? [], null);
        $this->setIfExists('settle_coin', $data ?? [], null);
        $this->setIfExists('deposit_network', $data ?? [], null);
        $this->setIfExists('settle_network', $data ?? [], null);
        $this->setIfExists('deposit_address', $data ?? [], null);
        $this->setIfExists('deposit_memo', $data ?? [], null);
        $this->setIfExists('settle_address', $data ?? [], null);
        $this->setIfExists('settle_memo', $data ?? [], null);
        $this->setIfExists('deposit_min', $data ?? [], null);
        $this->setIfExists('deposit_max', $data ?? [], null);
        $this->setIfExists('refund_address', $data ?? [], null);
        $this->setIfExists('refund_memo', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('expires_at', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('average_shift_seconds', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('settle_coin_network_fee', $data ?? [], null);
        $this->setIfExists('network_fee_usd', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['deposit_coin'] === null) {
            $invalidProperties[] = "'deposit_coin' can't be null";
        }
        if ($this->container['settle_coin'] === null) {
            $invalidProperties[] = "'settle_coin' can't be null";
        }
        if ($this->container['deposit_network'] === null) {
            $invalidProperties[] = "'deposit_network' can't be null";
        }
        if ($this->container['settle_network'] === null) {
            $invalidProperties[] = "'settle_network' can't be null";
        }
        if ($this->container['deposit_address'] === null) {
            $invalidProperties[] = "'deposit_address' can't be null";
        }
        if ($this->container['settle_address'] === null) {
            $invalidProperties[] = "'settle_address' can't be null";
        }
        if ($this->container['deposit_min'] === null) {
            $invalidProperties[] = "'deposit_min' can't be null";
        }
        if ($this->container['deposit_max'] === null) {
            $invalidProperties[] = "'deposit_max' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['expires_at'] === null) {
            $invalidProperties[] = "'expires_at' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['average_shift_seconds'] === null) {
            $invalidProperties[] = "'average_shift_seconds' can't be null";
        }
        if ($this->container['external_id'] === null) {
            $invalidProperties[] = "'external_id' can't be null";
        }
        if ($this->container['settle_coin_network_fee'] === null) {
            $invalidProperties[] = "'settle_coin_network_fee' can't be null";
        }
        if ($this->container['network_fee_usd'] === null) {
            $invalidProperties[] = "'network_fee_usd' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Shift ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at Creation timestamp
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets deposit_coin
     *
     * @return string
     */
    public function getDepositCoin()
    {
        return $this->container['deposit_coin'];
    }

    /**
     * Sets deposit_coin
     *
     * @param string $deposit_coin Deposit coin
     *
     * @return self
     */
    public function setDepositCoin($deposit_coin)
    {
        if (is_null($deposit_coin)) {
            throw new \InvalidArgumentException('non-nullable deposit_coin cannot be null');
        }
        $this->container['deposit_coin'] = $deposit_coin;

        return $this;
    }

    /**
     * Gets settle_coin
     *
     * @return string
     */
    public function getSettleCoin()
    {
        return $this->container['settle_coin'];
    }

    /**
     * Sets settle_coin
     *
     * @param string $settle_coin Settlement coin
     *
     * @return self
     */
    public function setSettleCoin($settle_coin)
    {
        if (is_null($settle_coin)) {
            throw new \InvalidArgumentException('non-nullable settle_coin cannot be null');
        }
        $this->container['settle_coin'] = $settle_coin;

        return $this;
    }

    /**
     * Gets deposit_network
     *
     * @return string
     */
    public function getDepositNetwork()
    {
        return $this->container['deposit_network'];
    }

    /**
     * Sets deposit_network
     *
     * @param string $deposit_network Deposit network
     *
     * @return self
     */
    public function setDepositNetwork($deposit_network)
    {
        if (is_null($deposit_network)) {
            throw new \InvalidArgumentException('non-nullable deposit_network cannot be null');
        }
        $this->container['deposit_network'] = $deposit_network;

        return $this;
    }

    /**
     * Gets settle_network
     *
     * @return string
     */
    public function getSettleNetwork()
    {
        return $this->container['settle_network'];
    }

    /**
     * Sets settle_network
     *
     * @param string $settle_network Settlement network
     *
     * @return self
     */
    public function setSettleNetwork($settle_network)
    {
        if (is_null($settle_network)) {
            throw new \InvalidArgumentException('non-nullable settle_network cannot be null');
        }
        $this->container['settle_network'] = $settle_network;

        return $this;
    }

    /**
     * Gets deposit_address
     *
     * @return string
     */
    public function getDepositAddress()
    {
        return $this->container['deposit_address'];
    }

    /**
     * Sets deposit_address
     *
     * @param string $deposit_address Deposit address
     *
     * @return self
     */
    public function setDepositAddress($deposit_address)
    {
        if (is_null($deposit_address)) {
            throw new \InvalidArgumentException('non-nullable deposit_address cannot be null');
        }
        $this->container['deposit_address'] = $deposit_address;

        return $this;
    }

    /**
     * Gets deposit_memo
     *
     * @return string|null
     */
    public function getDepositMemo()
    {
        return $this->container['deposit_memo'];
    }

    /**
     * Sets deposit_memo
     *
     * @param string|null $deposit_memo Deposit memo
     *
     * @return self
     */
    public function setDepositMemo($deposit_memo)
    {
        if (is_null($deposit_memo)) {
            throw new \InvalidArgumentException('non-nullable deposit_memo cannot be null');
        }
        $this->container['deposit_memo'] = $deposit_memo;

        return $this;
    }

    /**
     * Gets settle_address
     *
     * @return string
     */
    public function getSettleAddress()
    {
        return $this->container['settle_address'];
    }

    /**
     * Sets settle_address
     *
     * @param string $settle_address Settlement address
     *
     * @return self
     */
    public function setSettleAddress($settle_address)
    {
        if (is_null($settle_address)) {
            throw new \InvalidArgumentException('non-nullable settle_address cannot be null');
        }
        $this->container['settle_address'] = $settle_address;

        return $this;
    }

    /**
     * Gets settle_memo
     *
     * @return string|null
     */
    public function getSettleMemo()
    {
        return $this->container['settle_memo'];
    }

    /**
     * Sets settle_memo
     *
     * @param string|null $settle_memo Settlement memo
     *
     * @return self
     */
    public function setSettleMemo($settle_memo)
    {
        if (is_null($settle_memo)) {
            throw new \InvalidArgumentException('non-nullable settle_memo cannot be null');
        }
        $this->container['settle_memo'] = $settle_memo;

        return $this;
    }

    /**
     * Gets deposit_min
     *
     * @return string
     */
    public function getDepositMin()
    {
        return $this->container['deposit_min'];
    }

    /**
     * Sets deposit_min
     *
     * @param string $deposit_min Minimum deposit amount
     *
     * @return self
     */
    public function setDepositMin($deposit_min)
    {
        if (is_null($deposit_min)) {
            throw new \InvalidArgumentException('non-nullable deposit_min cannot be null');
        }
        $this->container['deposit_min'] = $deposit_min;

        return $this;
    }

    /**
     * Gets deposit_max
     *
     * @return string
     */
    public function getDepositMax()
    {
        return $this->container['deposit_max'];
    }

    /**
     * Sets deposit_max
     *
     * @param string $deposit_max Maximum deposit amount
     *
     * @return self
     */
    public function setDepositMax($deposit_max)
    {
        if (is_null($deposit_max)) {
            throw new \InvalidArgumentException('non-nullable deposit_max cannot be null');
        }
        $this->container['deposit_max'] = $deposit_max;

        return $this;
    }

    /**
     * Gets refund_address
     *
     * @return string|null
     */
    public function getRefundAddress()
    {
        return $this->container['refund_address'];
    }

    /**
     * Sets refund_address
     *
     * @param string|null $refund_address Refund address
     *
     * @return self
     */
    public function setRefundAddress($refund_address)
    {
        if (is_null($refund_address)) {
            throw new \InvalidArgumentException('non-nullable refund_address cannot be null');
        }
        $this->container['refund_address'] = $refund_address;

        return $this;
    }

    /**
     * Gets refund_memo
     *
     * @return string|null
     */
    public function getRefundMemo()
    {
        return $this->container['refund_memo'];
    }

    /**
     * Sets refund_memo
     *
     * @param string|null $refund_memo Refund memo
     *
     * @return self
     */
    public function setRefundMemo($refund_memo)
    {
        if (is_null($refund_memo)) {
            throw new \InvalidArgumentException('non-nullable refund_memo cannot be null');
        }
        $this->container['refund_memo'] = $refund_memo;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Shift type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return string
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param string $expires_at Expiration timestamp
     *
     * @return self
     */
    public function setExpiresAt($expires_at)
    {
        if (is_null($expires_at)) {
            throw new \InvalidArgumentException('non-nullable expires_at cannot be null');
        }
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Shift status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets average_shift_seconds
     *
     * @return string
     */
    public function getAverageShiftSeconds()
    {
        return $this->container['average_shift_seconds'];
    }

    /**
     * Sets average_shift_seconds
     *
     * @param string $average_shift_seconds Average shift seconds
     *
     * @return self
     */
    public function setAverageShiftSeconds($average_shift_seconds)
    {
        if (is_null($average_shift_seconds)) {
            throw new \InvalidArgumentException('non-nullable average_shift_seconds cannot be null');
        }
        $this->container['average_shift_seconds'] = $average_shift_seconds;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id External ID
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets settle_coin_network_fee
     *
     * @return string
     */
    public function getSettleCoinNetworkFee()
    {
        return $this->container['settle_coin_network_fee'];
    }

    /**
     * Sets settle_coin_network_fee
     *
     * @param string $settle_coin_network_fee Settlement coin network fee
     *
     * @return self
     */
    public function setSettleCoinNetworkFee($settle_coin_network_fee)
    {
        if (is_null($settle_coin_network_fee)) {
            throw new \InvalidArgumentException('non-nullable settle_coin_network_fee cannot be null');
        }
        $this->container['settle_coin_network_fee'] = $settle_coin_network_fee;

        return $this;
    }

    /**
     * Gets network_fee_usd
     *
     * @return string
     */
    public function getNetworkFeeUsd()
    {
        return $this->container['network_fee_usd'];
    }

    /**
     * Sets network_fee_usd
     *
     * @param string $network_fee_usd Network fee in USD
     *
     * @return self
     */
    public function setNetworkFeeUsd($network_fee_usd)
    {
        if (is_null($network_fee_usd)) {
            throw new \InvalidArgumentException('non-nullable network_fee_usd cannot be null');
        }
        $this->container['network_fee_usd'] = $network_fee_usd;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


